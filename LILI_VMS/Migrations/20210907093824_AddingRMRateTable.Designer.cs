// <auto-generated />
using LILI_VMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LILI_VMS.Migrations
{
    [DbContext(typeof(dbVehicleManagementContext))]
    [Migration("20210907093824_AddingRMRateTable")]
    partial class AddingRMRateTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LILI_VMS.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LILI_VMS.Models.GetTblProductionProcessDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CurrentUseQty");

                    b.Property<decimal>("IssuedQty");

                    b.Property<string>("MaterialCode");

                    b.Property<string>("MaterialName");

                    b.Property<decimal>("PreviousUsedQty");

                    b.Property<decimal>("ProcessLoss");

                    b.Property<string>("ProcessNo");

                    b.Property<decimal>("ReqQuantity");

                    b.Property<decimal>("StdConsumptionQty");

                    b.Property<decimal>("TotalConsumption");

                    b.Property<string>("Unit");

                    b.Property<decimal>("Wastage");

                    b.HasKey("Id");

                    b.ToTable("GetTblProductionProcessDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.MenuMaster", b =>
                {
                    b.Property<int>("MenuIdentity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MenuId")
                        .HasColumnName("MenuID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MenuName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MenuFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasColumnName("MenuURL")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ParentMenuId")
                        .IsRequired()
                        .HasColumnName("Parent_MenuID")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UseYn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_YN")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('Y')");

                    b.Property<string>("UserRoll")
                        .IsRequired()
                        .HasColumnName("User_Roll")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("MenuIdentity", "MenuId", "MenuName");

                    b.ToTable("MenuMaster");
                });

            modelBuilder.Entity("LILI_VMS.Models.ReportApprovalFormForImport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ACISpecNo");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("Business");

                    b.Property<decimal>("ConsumptioninPreviousYear");

                    b.Property<string>("DateEffectiveRevised");

                    b.Property<string>("ETD");

                    b.Property<string>("FGOpeningStockQuantity");

                    b.Property<string>("FGSalesConsumptionWeek");

                    b.Property<string>("ForTheManufactureOfFinishedProduct");

                    b.Property<string>("FormNo");

                    b.Property<string>("HistoricalHighestRate");

                    b.Property<string>("HistoricalLowestRate");

                    b.Property<decimal>("InTransitOnOrderSalesConsumptionWeek");

                    b.Property<decimal>("InTransitOnOrderStockQuantity");

                    b.Property<string>("IndentorID");

                    b.Property<string>("IndentorName");

                    b.Property<decimal>("LCValue");

                    b.Property<string>("LastAwardedManufacturer");

                    b.Property<string>("LastPurchaseRate");

                    b.Property<decimal>("LeadTimeMonth");

                    b.Property<decimal>("LeadTimeSalesConsumptionWeeks");

                    b.Property<decimal>("MAC");

                    b.Property<string>("ManufacturerCode");

                    b.Property<string>("ManufacturerName");

                    b.Property<string>("MaterialArrival");

                    b.Property<string>("NameofTheMaterial");

                    b.Property<string>("PRNo");

                    b.Property<decimal>("PRQuantity");

                    b.Property<string>("PriceUnit");

                    b.Property<decimal>("ProposedOrderQuantityUnit");

                    b.Property<decimal>("ProposedOrderSalesConsumptionWeek");

                    b.Property<decimal>("PurchasedinCurrentYear");

                    b.Property<string>("QCSourceArovalStatus");

                    b.Property<decimal>("RMInFGSalesConsumptionWeek");

                    b.Property<decimal>("RMInFGStockQuantity");

                    b.Property<decimal>("RMPMOpeningStockQuantity");

                    b.Property<decimal>("RMPMSalesConsumptionWeek");

                    b.Property<string>("ReferenceRateinPreviousYear");

                    b.Property<decimal>("RequirementinCurrentYear");

                    b.Property<string>("Revision");

                    b.Property<decimal>("ShelfLifeYear");

                    b.Property<string>("ShortDue");

                    b.Property<string>("SourceValidationInDGDA");

                    b.Property<decimal>("StandardOrderSize");

                    b.Property<string>("StockOfMaterialAsOn");

                    b.Property<decimal>("StockwhenatFactory67Week");

                    b.Property<decimal>("SubTotal123QuantityUnit");

                    b.Property<decimal>("SubTotal123SalesConsumptionWeeks");

                    b.Property<string>("SupplierCode");

                    b.Property<string>("SupplierName");

                    b.Property<string>("Title");

                    b.Property<decimal>("Total45QuantityUnit");

                    b.Property<decimal>("Total45SalesConsumptionWeeks");

                    b.HasKey("Id");

                    b.ToTable("ReportApprovalFormForImport");
                });

            modelBuilder.Entity("LILI_VMS.Models.ReportSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BidQuantity");

                    b.Property<decimal>("Fobrate");

                    b.Property<string>("IndentorName");

                    b.Property<bool>("IsDGDAValid");

                    b.Property<string>("ItemCode");

                    b.Property<string>("ManufacturerCode");

                    b.Property<long?>("ManufacturerCountryId");

                    b.Property<string>("ManufacturerName");

                    b.Property<decimal>("MinOrderQuantity");

                    b.Property<decimal>("QuotedRate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ShipmentDate");

                    b.Property<string>("SubmissionNo");

                    b.Property<string>("SupplierCode");

                    b.Property<long?>("SupplierCountryId");

                    b.Property<string>("SupplierName");

                    b.HasKey("Id");

                    b.ToTable("ReportSubmission");
                });

            modelBuilder.Entity("LILI_VMS.Models.ReportSupplierSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BidQuantity");

                    b.Property<decimal>("Fobrate");

                    b.Property<string>("IndentorName");

                    b.Property<bool>("IsDGDAValid");

                    b.Property<string>("ItemCode");

                    b.Property<string>("ItemName");

                    b.Property<string>("ManufacturerCode");

                    b.Property<long?>("ManufacturerCountryId");

                    b.Property<string>("ManufacturerName");

                    b.Property<decimal>("MinOrderQuantity");

                    b.Property<decimal>("QuotedRate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ShipmentDate");

                    b.Property<string>("SubmissionNo");

                    b.Property<string>("SupplierCode");

                    b.Property<long?>("SupplierCountryId");

                    b.Property<string>("SupplierName");

                    b.HasKey("Id");

                    b.ToTable("ReportSupplierSubmission");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblCountry", b =>
                {
                    b.Property<long?>("Id");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblCountry");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmpGrade", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblEmpGrade");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Designation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("EmpGrade")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmpId")
                        .IsUnique()
                        .HasName("IX_tblEmployee");

                    b.ToTable("tblEmployee");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployeeEducationalDetail", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("ExamId");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("tblEmployeeEducationalDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployeeExpert", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("ExpertiesId");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("tblEmployeeExpert");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblExpertArea", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExpertArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblExpertArea");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblLineSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblLineSetup");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblMachineSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Capacity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblMachineSetup");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Href")
                        .HasColumnName("href")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IconClass")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("OrderNo");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblMenu");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblMonthlyPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PlanningNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("PlanningNo")
                        .IsUnique()
                        .HasName("IX_tblMonthlyPlanning");

                    b.ToTable("tblMonthlyPlanning");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblMonthlyPlanningDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Fgcode")
                        .IsRequired()
                        .HasColumnName("FGCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("PlanQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PlanningNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("RevisedPlanQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("PlanningNo");

                    b.ToTable("tblMonthlyPlanningDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblProductionProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IssueNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ManufacBatchEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ManufacBatchStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManufacLineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ManufacMachineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("ManufacMachineHour")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("ManufacManHour")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("ManufacNoOfWorker")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("ManufacShiftBreakDownChangeTime")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("ManufacShiftCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PackBatchEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PackBatchStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PackLineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PackMachineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("PackMachineHour")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("PackManHour")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("PackNoOfWorker")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("PackShiftBreakDownChangeTime")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("PackShiftCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcessNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("ProductionQty")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProcessNo")
                        .IsUnique()
                        .HasName("IX_tblProductionProcess");

                    b.HasIndex("RequisitionNo");

                    b.ToTable("tblProductionProcess");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblProductionProcessDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CurrentUseQty")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("IssuedQty")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("PreviousUsedQty")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("ProcessLoss")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<string>("ProcessNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("ReqQuantity")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("StdConsumptionQty")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("TotalConsumption")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("Wastage")
                        .HasColumnType("numeric(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessNo");

                    b.ToTable("tblProductionProcessDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblQc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProcessNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime>("Qcdate")
                        .HasColumnName("QCDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Qcno")
                        .IsRequired()
                        .HasColumnName("QCNo")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<decimal>("QcpassQty")
                        .HasColumnName("QCPassQty")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("Qcqty")
                        .HasColumnName("QCQty")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("QcrejectQty")
                        .HasColumnName("QCRejectQty")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Qcno")
                        .IsUnique()
                        .HasName("IX_tblQC");

                    b.ToTable("tblQC");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblQcdetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Qcno")
                        .IsRequired()
                        .HasColumnName("QCNo")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("QcparameterActualValue")
                        .IsRequired()
                        .HasColumnName("QCParameterActualValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("QcparameterCode")
                        .IsRequired()
                        .HasColumnName("QCParameterCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Qcno");

                    b.ToTable("tblQCDetails");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblQcparameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("QcparameterCode")
                        .IsRequired()
                        .HasColumnName("QCParameterCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("QcparameterName")
                        .IsRequired()
                        .HasColumnName("QCParameterName")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("QcparameterStandardValue")
                        .IsRequired()
                        .HasColumnName("QCParameterStandardValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnName("TypeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblQCParameter");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblQcparameterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tblQCParameterType");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblRequisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("NumberOfBatch")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("RequisitionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RequisitionNo")
                        .IsUnique()
                        .HasName("IX_tblRequisition");

                    b.ToTable("tblRequisition");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblRequisitionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AvailableStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 4)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("RequiredQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 4)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RequisitionNo");

                    b.ToTable("tblRequisitionDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IssueNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReturnNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RequisitionNo");

                    b.HasIndex("ReturnNo")
                        .IsUnique()
                        .HasName("IX_tblReturn");

                    b.ToTable("tblReturn");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblReturnDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("IssuedQty")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ReturnNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("ReturnQty")
                        .HasColumnType("numeric(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnNo");

                    b.ToTable("tblReturnDetails");
                });

            modelBuilder.Entity("LILI_VMS.Models.tblRMRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ClosingCost");

                    b.Property<DateTime?>("Edate");

                    b.Property<string>("Euser");

                    b.Property<DateTime>("Idate");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Iuser");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("plantCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("tblRMRate");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblShiftSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("PlannedDownChangeTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("ProductiveShiftHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("StandardShiftHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("tblShiftSetup");
                });

            modelBuilder.Entity("LILI_VMS.Models.View_BOM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BatchSize");

                    b.Property<string>("Bomtext")
                        .HasColumnName("BOMText")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bomtype")
                        .HasColumnName("BOMType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BusinessCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long>("CompanyId");

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Iuser")
                        .IsRequired()
                        .HasColumnName("IUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("PlantId");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("StandardOutput");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("View_BOM");
                });

            modelBuilder.Entity("LILI_VMS.Models.View_BOMDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("Bomid")
                        .HasColumnName("BOMId");

                    b.Property<decimal>("CostPerProductUnit")
                        .HasColumnType("decimal(24, 8)");

                    b.Property<int>("ItemNo");

                    b.Property<decimal>("LossQuantity")
                        .HasColumnType("decimal(24, 8)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("PerBatchQuantityExcludingLoss")
                        .HasColumnType("decimal(24, 8)");

                    b.Property<decimal>("QuantityPerBatch")
                        .HasColumnType("decimal(24, 8)");

                    b.Property<decimal>("Tolerance");

                    b.HasKey("Id");

                    b.HasIndex("Bomid", "MaterialCode")
                        .IsUnique()
                        .HasName("IX_tblBOMDetail")
                        .HasFilter("[BOMId] IS NOT NULL AND [MaterialCode] IS NOT NULL");

                    b.ToTable("View_BOMDetail");
                });

            modelBuilder.Entity("LILI_VMS.Models.View_IssueQuantity", b =>
                {
                    b.Property<long>("Id");

                    b.Property<decimal>("Issue_Quantity_DC")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("RequisitionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("View_IssueQuantity");
                });

            modelBuilder.Entity("LILI_VMS.Models.View_Material", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("AlternativeUoM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("AuoMconversionValue")
                        .HasColumnName("AUoMConversionValue")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("BaseUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BusinessCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long>("CompanyId");

                    b.Property<decimal>("ConversionValue")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("Discontinue")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Edate")
                        .HasColumnName("EDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EditIpaddress")
                        .HasColumnName("EditIPAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Euser")
                        .HasColumnName("EUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Idate")
                        .HasColumnName("IDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsertIpaddress")
                        .HasColumnName("InsertIPAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Iuser")
                        .HasColumnName("IUser")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MaterialName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long>("MaterialTypeId");

                    b.Property<string>("SkuoM")
                        .IsRequired()
                        .HasColumnName("SKUoM")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SubBusinessCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<long?>("SubCategoryId");

                    b.HasKey("Id");

                    b.ToTable("View_Material");
                });

            modelBuilder.Entity("LILI_VMS.Models.View_Product", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("BusiSumGroupCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<decimal>("Carton")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("DiscountStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<decimal>("DistDiscount")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<decimal>("Mrp")
                        .HasColumnName("MRP")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<string>("PackSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Pccc")
                        .IsRequired()
                        .HasColumnName("PCCC")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("PrincipalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ProductName1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<decimal>("RatePerCarton")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("ReportGroupCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Show")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Smscode")
                        .IsRequired()
                        .HasColumnName("SMSCODE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Smsorder")
                        .IsRequired()
                        .HasColumnName("SMSOrder")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SubBusinessCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<decimal>("Vat")
                        .HasColumnName("VAT")
                        .HasColumnType("numeric(18, 4)");

                    b.HasKey("ProductCode");

                    b.ToTable("View_Product");
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("LILI_VMS.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("LILI_VMS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LILI_VMS.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("LILI_VMS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployee", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblEmployee", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("LILI_VMS.Models.TblEmployee", "Id")
                        .HasConstraintName("FK_tblEmployee_tblEmployee");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployeeEducationalDetail", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblEmployee", "Emp")
                        .WithMany("tblEmpEducationalDetail")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_tblEmployeeEducationalDetails_tblEmployee")
                        .HasPrincipalKey("EmpId");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblEmployeeExpert", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblEmployee", "Emp")
                        .WithMany("TblEmployeeExpert")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_tblEmployeeExpert_tblEmployee")
                        .HasPrincipalKey("EmpId");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblMonthlyPlanningDetail", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblMonthlyPlanning", "PlanningNoNavigation")
                        .WithMany("TblMonthlyPlanningDetail")
                        .HasForeignKey("PlanningNo")
                        .HasConstraintName("FK_tblMonthlyPlanningDetail_tblMonthlyPlanning")
                        .HasPrincipalKey("PlanningNo");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblProductionProcess", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblRequisition", "RequisitionNoNavigation")
                        .WithMany("TblProductionProcess")
                        .HasForeignKey("RequisitionNo")
                        .HasConstraintName("FK_tblProductionProcess_tblRequisition")
                        .HasPrincipalKey("RequisitionNo");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblProductionProcessDetail", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblProductionProcess", "ProcessNoNavigation")
                        .WithMany("TblProductionProcessDetail")
                        .HasForeignKey("ProcessNo")
                        .HasConstraintName("FK_tblProductionProcessDetail_tblProductionProcess")
                        .HasPrincipalKey("ProcessNo");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblQcdetails", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblQc", "QcnoNavigation")
                        .WithMany("TblQcdetails")
                        .HasForeignKey("Qcno")
                        .HasConstraintName("FK_tblQCDetails_tblQC")
                        .HasPrincipalKey("Qcno");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblRequisitionDetail", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblRequisition", "RequisitionNoNavigation")
                        .WithMany("TblRequisitionDetail")
                        .HasForeignKey("RequisitionNo")
                        .HasConstraintName("FK_tblRequisitionDetail_tblRequisition")
                        .HasPrincipalKey("RequisitionNo");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblReturn", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblRequisition", "RequisitionNoNavigation")
                        .WithMany("TblReturn")
                        .HasForeignKey("RequisitionNo")
                        .HasConstraintName("FK_tblReturn_tblRequisition")
                        .HasPrincipalKey("RequisitionNo");
                });

            modelBuilder.Entity("LILI_VMS.Models.TblReturnDetails", b =>
                {
                    b.HasOne("LILI_VMS.Models.TblReturn", "ReturnNoNavigation")
                        .WithMany("TblReturnDetails")
                        .HasForeignKey("ReturnNo")
                        .HasConstraintName("FK_tblReturnDetails_tblReturn")
                        .HasPrincipalKey("ReturnNo");
                });
#pragma warning restore 612, 618
        }
    }
}
